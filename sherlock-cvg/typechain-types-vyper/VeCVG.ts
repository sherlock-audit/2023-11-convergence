/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface VeCVGInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "initialize"
      | "get_last_nft_slope"
      | "nft_point_history_ts"
      | "locked__end"
      | "checkpoint"
      | "create_lock"
      | "increase_amount"
      | "increase_unlock_time"
      | "withdraw"
      | "balanceOf"
      | "balanceOfAt"
      | "total_supply"
      | "totalSupplyAt"
      | "cvg_control_tower"
      | "supply"
      | "locked"
      | "epoch"
      | "point_history"
      | "nft_point_history"
      | "nft_point_epoch"
      | "slope_changes"
      | "name"
      | "symbol"
      | "version"
      | "decimals"
      | "admin"
      | "future_admin"
      | "initialized"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CommitOwnership"
      | "ApplyOwnership"
      | "Deposit"
      | "Withdraw"
      | "Supply"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "get_last_nft_slope",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nft_point_history_ts",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "locked__end",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "create_lock",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increase_amount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increase_unlock_time",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "total_supply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cvg_control_tower",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "supply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "locked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "point_history",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nft_point_history",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nft_point_epoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slope_changes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "future_admin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_last_nft_slope",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nft_point_history_ts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "locked__end",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "create_lock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increase_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increase_unlock_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "total_supply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cvg_control_tower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "point_history",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nft_point_history",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nft_point_epoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slope_changes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "future_admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
}

export namespace CommitOwnershipEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApplyOwnershipEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    provider: BigNumberish,
    value: BigNumberish,
    locktime: BigNumberish,
    type_: BigNumberish,
    ts: BigNumberish
  ];
  export type OutputTuple = [
    provider: bigint,
    value: bigint,
    locktime: bigint,
    type_: bigint,
    ts: bigint
  ];
  export interface OutputObject {
    provider: bigint;
    value: bigint;
    locktime: bigint;
    type: bigint;
    ts: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    provider: BigNumberish,
    value: BigNumberish,
    ts: BigNumberish
  ];
  export type OutputTuple = [provider: bigint, value: bigint, ts: bigint];
  export interface OutputObject {
    provider: bigint;
    value: bigint;
    ts: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SupplyEvent {
  export type InputTuple = [prevSupply: BigNumberish, supply: BigNumberish];
  export type OutputTuple = [prevSupply: bigint, supply: bigint];
  export interface OutputObject {
    prevSupply: bigint;
    supply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VeCVG extends BaseContract {
  connect(runner?: ContractRunner | null): VeCVG;
  waitForDeployment(): Promise<this>;

  interface: VeCVGInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  initialize: TypedContractMethod<
    [
      _cvg_control_tower: AddressLike,
      _name: string,
      _symbol: string,
      _version: string
    ],
    [void],
    "nonpayable"
  >;

  get_last_nft_slope: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  nft_point_history_ts: TypedContractMethod<
    [_tokenId: BigNumberish, _idx: BigNumberish],
    [bigint],
    "view"
  >;

  locked__end: TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;

  checkpoint: TypedContractMethod<[], [void], "nonpayable">;

  create_lock: TypedContractMethod<
    [_tokenId: BigNumberish, _value: BigNumberish, _unlock_time: BigNumberish],
    [void],
    "nonpayable"
  >;

  increase_amount: TypedContractMethod<
    [_tokenId: BigNumberish, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  increase_unlock_time: TypedContractMethod<
    [_tokenId: BigNumberish, _unlock_time: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;

  balanceOf: TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;

  balanceOfAt: TypedContractMethod<
    [_tokenId: BigNumberish, _block: BigNumberish],
    [bigint],
    "view"
  >;

  total_supply: TypedContractMethod<[], [bigint], "view">;

  totalSupplyAt: TypedContractMethod<[_block: BigNumberish], [bigint], "view">;

  cvg_control_tower: TypedContractMethod<[], [string], "view">;

  supply: TypedContractMethod<[], [bigint], "view">;

  locked: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { amount: bigint; end: bigint }],
    "view"
  >;

  epoch: TypedContractMethod<[], [bigint], "view">;

  point_history: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        bias: bigint;
        slope: bigint;
        ts: bigint;
        blk: bigint;
      }
    ],
    "view"
  >;

  nft_point_history: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        bias: bigint;
        slope: bigint;
        ts: bigint;
        blk: bigint;
      }
    ],
    "view"
  >;

  nft_point_epoch: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  slope_changes: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  version: TypedContractMethod<[], [string], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  future_admin: TypedContractMethod<[], [string], "view">;

  initialized: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _cvg_control_tower: AddressLike,
      _name: string,
      _symbol: string,
      _version: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "get_last_nft_slope"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "nft_point_history_ts"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _idx: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "locked__end"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkpoint"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "create_lock"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _value: BigNumberish, _unlock_time: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increase_amount"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increase_unlock_time"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _unlock_time: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfAt"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _block: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "total_supply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyAt"
  ): TypedContractMethod<[_block: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "cvg_control_tower"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "locked"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { amount: bigint; end: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "epoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "point_history"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        bias: bigint;
        slope: bigint;
        ts: bigint;
        blk: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nft_point_history"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        bias: bigint;
        slope: bigint;
        ts: bigint;
        blk: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nft_point_epoch"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "slope_changes"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "future_admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialized"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "CommitOwnership"
  ): TypedContractEvent<
    CommitOwnershipEvent.InputTuple,
    CommitOwnershipEvent.OutputTuple,
    CommitOwnershipEvent.OutputObject
  >;
  getEvent(
    key: "ApplyOwnership"
  ): TypedContractEvent<
    ApplyOwnershipEvent.InputTuple,
    ApplyOwnershipEvent.OutputTuple,
    ApplyOwnershipEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: "Supply"
  ): TypedContractEvent<
    SupplyEvent.InputTuple,
    SupplyEvent.OutputTuple,
    SupplyEvent.OutputObject
  >;

  filters: {
    "CommitOwnership(address)": TypedContractEvent<
      CommitOwnershipEvent.InputTuple,
      CommitOwnershipEvent.OutputTuple,
      CommitOwnershipEvent.OutputObject
    >;
    CommitOwnership: TypedContractEvent<
      CommitOwnershipEvent.InputTuple,
      CommitOwnershipEvent.OutputTuple,
      CommitOwnershipEvent.OutputObject
    >;

    "ApplyOwnership(address)": TypedContractEvent<
      ApplyOwnershipEvent.InputTuple,
      ApplyOwnershipEvent.OutputTuple,
      ApplyOwnershipEvent.OutputObject
    >;
    ApplyOwnership: TypedContractEvent<
      ApplyOwnershipEvent.InputTuple,
      ApplyOwnershipEvent.OutputTuple,
      ApplyOwnershipEvent.OutputObject
    >;

    "Deposit(uint256,uint256,uint256,int128,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Withdraw(uint256,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    "Supply(uint256,uint256)": TypedContractEvent<
      SupplyEvent.InputTuple,
      SupplyEvent.OutputTuple,
      SupplyEvent.OutputObject
    >;
    Supply: TypedContractEvent<
      SupplyEvent.InputTuple,
      SupplyEvent.OutputTuple,
      SupplyEvent.OutputObject
    >;
  };
}
